"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const RN = __importStar(require("react-native"));
const Thumb = ({ color = 'darkcyan', trackHeight, size = 15, style, thumbImage }) => {
    const thumbContainerStyle = react_1.default.useMemo(() => ({
        width: trackHeight,
        height: trackHeight,
        justifyContent: 'center',
        alignItems: 'center',
        zIndex: 1
    }), [trackHeight]);
    /** We want to cover the end of the track */
    const thumbViewStyle = react_1.default.useMemo(() => RN.StyleSheet.compose({
        width: size,
        height: size,
        backgroundColor: color,
        zIndex: 1,
        borderRadius: size / 2,
        overflow: 'hidden',
        // This is for web
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        userSelect: 'none'
    }, style), [style, size, color]);
    return react_1.default.createElement(RN.View, { pointerEvents: "none", style: thumbContainerStyle }, thumbImage ? react_1.default.createElement(RN.Image, { source: thumbImage, style: thumbViewStyle }) : react_1.default.createElement(RN.View, { style: thumbViewStyle }));
};
exports.default = react_1.default.memo(Thumb);
