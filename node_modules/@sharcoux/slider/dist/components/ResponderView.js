"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const RN = __importStar(require("react-native"));
const useRounding_1 = __importDefault(require("../hooks/useRounding"));
const accessibility = [
    { name: 'increment', label: 'increment' },
    { name: 'decrement', label: 'decrement' }
];
const ResponderView = react_1.default.forwardRef(({ vertical, inverted, enabled, style, minimumValue, maximumValue, value, step, updateValue, onLayout: onLayoutProp, onMove: onMoveProp, onPress: onPressProp, onRelease: onReleaseProp, ...props }, ref) => {
    const containerSize = react_1.default.useRef({ width: 0, height: 0 });
    const fallbackRef = react_1.default.useRef(null);
    const forwardRef = ref || fallbackRef;
    const round = (0, useRounding_1.default)({ step, minimumValue, maximumValue });
    // We calculate the style of the container
    const isVertical = react_1.default.useMemo(() => vertical || (style && (RN.StyleSheet.flatten(style).flexDirection || '').startsWith('column')), [vertical, style]);
    const containerStyle = react_1.default.useMemo(() => ([
        {
            flexGrow: 1,
            flexShrink: 1,
            flexBasis: 'auto',
            flexDirection: (isVertical ? 'column' : 'row') + (inverted ? '-reverse' : ''),
            // For web
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            userSelect: 'none',
            alignItems: 'center',
            cursor: 'pointer'
        },
        style
    ]), [style, isVertical, inverted]);
    // Accessibility actions
    const accessibilityActions = react_1.default.useCallback((event) => {
        const tenth = (maximumValue - minimumValue) / 10;
        switch (event.nativeEvent.actionName) {
            case 'increment':
                updateValue(value + (step || tenth));
                break;
            case 'decrement':
                updateValue(value - (step || tenth));
                break;
        }
    }, [maximumValue, minimumValue, updateValue, value, step]);
    const handleAccessibilityKeys = react_1.default.useCallback((event) => {
        const key = event.nativeEvent.key;
        switch (key) {
            case 'ArrowUp':
            case 'ArrowRight':
                {
                    const accessibilityEvent = { ...event, nativeEvent: { actionName: 'increment' } };
                    accessibilityActions(accessibilityEvent);
                }
                break;
            case 'ArrowDown':
            case 'ArrowLeft':
                {
                    const accessibilityEvent = { ...event, nativeEvent: { actionName: 'decrement' } };
                    accessibilityActions(accessibilityEvent);
                }
                break;
        }
    }, [accessibilityActions]);
    const accessibilityValues = react_1.default.useMemo(() => ({ min: minimumValue, max: maximumValue, now: value }), [minimumValue, maximumValue, value]);
    /** Convert a touch event into it's position on the slider */
    const eventToValue = react_1.default.useCallback((event) => {
        var _a;
        const { locationX: x, locationY: y } = event.nativeEvent;
        const offset = isVertical ? y : x;
        const size = ((_a = containerSize.current) === null || _a === void 0 ? void 0 : _a[isVertical ? 'height' : 'width']) || 1;
        const newValue = inverted
            ? maximumValue - ((maximumValue - minimumValue) * offset) / size
            : minimumValue + ((maximumValue - minimumValue) * offset) / size;
        return round(newValue);
    }, [isVertical, inverted, maximumValue, minimumValue, round]);
    const onMove = react_1.default.useCallback((event) => {
        onMoveProp(eventToValue(event));
    }, [eventToValue, onMoveProp]);
    const onPress = react_1.default.useCallback((event) => {
        onPressProp(eventToValue(event));
    }, [eventToValue, onPressProp]);
    const onRelease = react_1.default.useCallback((event) => {
        onReleaseProp(eventToValue(event));
    }, [eventToValue, onReleaseProp]);
    const isEnabled = react_1.default.useCallback(() => enabled, [enabled]);
    const onLayout = react_1.default.useCallback((event) => {
        onLayoutProp === null || onLayoutProp === void 0 ? void 0 : onLayoutProp(event);
        containerSize.current = event.nativeEvent.layout;
    }, [onLayoutProp]);
    return react_1.default.createElement(RN.View, { ...props, ref: forwardRef, onLayout: onLayout, accessibilityActions: accessibility, onAccessibilityAction: accessibilityActions, accessible: true, accessibilityValue: accessibilityValues, accessibilityRole: 'adjustable', style: containerStyle, onStartShouldSetResponder: isEnabled, onMoveShouldSetResponder: isEnabled, onResponderGrant: onPress, onResponderRelease: onRelease, onResponderMove: onMove, 
        // This is for web
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        onKeyDown: handleAccessibilityKeys });
});
ResponderView.displayName = 'ResponderView';
exports.default = react_1.default.memo(ResponderView);
