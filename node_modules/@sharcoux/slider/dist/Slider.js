"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const useThumb_1 = __importDefault(require("./hooks/useThumb"));
const Track_1 = __importDefault(require("./components/Track"));
const Thumb_1 = __importDefault(require("./components/Thumb"));
const ResponderView_1 = __importDefault(require("./components/ResponderView"));
const useDrag_1 = __importDefault(require("./hooks/useDrag"));
const Slider = react_1.default.forwardRef((props, forwardedRef) => {
    const { minimumValue = 0, maximumValue = 1, value: propValue = minimumValue, step = 0, minimumTrackTintColor = 'grey', maximumTrackTintColor = 'grey', thumbTintColor = 'darkcyan', thumbStyle, trackStyle, minTrackStyle, maxTrackStyle, style, inverted = false, vertical = false, enabled = true, slideOnTap = true, trackHeight = 4, thumbSize = 15, thumbImage, onValueChange, onSlidingStart, onSlidingComplete, ...others } = props;
    const { updateValue, value, canMove } = (0, useThumb_1.default)({
        minimumValue,
        maximumValue,
        value: propValue,
        step,
        slideOnTap,
        onValueChange
    });
    const { onPress, onMove, onRelease } = (0, useDrag_1.default)({ value, canMove, updateValue, onSlidingComplete, onSlidingStart });
    const percentage = react_1.default.useMemo(() => (value - minimumValue) / ((maximumValue - minimumValue) || 1), [value, minimumValue, maximumValue]);
    // We add a default padding to ensure that the responder view has enough space to recognize the touches
    const responderStyle = react_1.default.useMemo(() => [{ [vertical ? 'paddingHorizontal' : 'paddingVertical']: 10 }, style], [style, vertical]);
    // See https://github.com/Sharcoux/slider/issues/13
    const thumbRadius = Math.min(trackHeight, thumbSize);
    const { minStyle, maxStyle } = react_1.default.useMemo(() => ({
        minStyle: (trackStyle && minTrackStyle) ? [trackStyle, minTrackStyle] : trackStyle || minTrackStyle,
        maxStyle: (trackStyle && maxTrackStyle) ? [trackStyle, maxTrackStyle] : trackStyle || maxTrackStyle
    }), [trackStyle, minTrackStyle, maxTrackStyle]);
    return (react_1.default.createElement(ResponderView_1.default, { style: responderStyle, ref: forwardedRef, maximumValue: maximumValue, minimumValue: minimumValue, step: step, value: value, updateValue: updateValue, onPress: onPress, onMove: onMove, onRelease: onRelease, enabled: enabled, vertical: vertical, inverted: inverted, ...others },
        react_1.default.createElement(Track_1.default, { color: minimumTrackTintColor, style: minStyle, length: percentage * 100, vertical: vertical, thickness: trackHeight }),
        react_1.default.createElement(Thumb_1.default, { size: thumbSize, color: thumbTintColor, trackHeight: thumbRadius, style: thumbStyle, thumbImage: thumbImage }),
        react_1.default.createElement(Track_1.default, { color: maximumTrackTintColor, style: maxStyle, length: (1 - percentage) * 100, vertical: vertical, thickness: trackHeight })));
});
Slider.displayName = 'Slider';
exports.default = Slider;
