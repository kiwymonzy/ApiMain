"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const useRange_1 = __importDefault(require("./hooks/useRange"));
const Track_1 = __importDefault(require("./components/Track"));
const Thumb_1 = __importDefault(require("./components/Thumb"));
const ResponderView_1 = __importDefault(require("./components/ResponderView"));
const useDrag_1 = __importDefault(require("./hooks/useDrag"));
const Slider = react_1.default.forwardRef((props, forwardedRef) => {
    const { minimumValue = 0, maximumValue = 1, range: propValue = [minimumValue, minimumValue], step = 0, outboundColor = 'grey', inboundColor = 'blue', thumbTintColor = 'darkcyan', thumbStyle, trackStyle, minTrackStyle, midTrackStyle, maxTrackStyle, style, inverted = false, vertical = false, enabled = true, slideOnTap = true, trackHeight = 4, thumbSize = 15, thumbImage, minimumRange = step, crossingAllowed = false, onValueChange, onSlidingStart, onSlidingComplete, ...others } = props;
    const { updateClosestValue, updateMaxValue, range, canMove } = (0, useRange_1.default)({
        minimumRange,
        minimumValue,
        maximumValue,
        range: propValue,
        step,
        slideOnTap,
        crossingAllowed,
        onValueChange
    });
    const { onPress, onMove, onRelease } = (0, useDrag_1.default)({ value: range, updateValue: updateClosestValue, onSlidingComplete, onSlidingStart, canMove });
    const [min, max] = range;
    const minTrackPct = react_1.default.useMemo(() => (min - minimumValue) / ((maximumValue - minimumValue) || 1), [min, minimumValue, maximumValue]);
    const maxTrackPct = react_1.default.useMemo(() => (max - minimumValue) / ((maximumValue - minimumValue) || 1), [max, minimumValue, maximumValue]);
    // See https://github.com/Sharcoux/slider/issues/13
    const thumbRadius = Math.min(trackHeight, thumbSize);
    const { minStyle, midStyle, maxStyle } = react_1.default.useMemo(() => ({
        minStyle: (trackStyle && minTrackStyle) ? [trackStyle, minTrackStyle] : trackStyle || minTrackStyle,
        midStyle: (trackStyle && midTrackStyle) ? [trackStyle, midTrackStyle] : trackStyle || midTrackStyle,
        maxStyle: (trackStyle && maxTrackStyle) ? [trackStyle, maxTrackStyle] : trackStyle || maxTrackStyle
    }), [trackStyle, minTrackStyle, midTrackStyle, maxTrackStyle]);
    return (react_1.default.createElement(ResponderView_1.default, { style: style, ref: forwardedRef, maximumValue: maximumValue, minimumValue: minimumValue, step: step, value: max, updateValue: updateMaxValue, onPress: onPress, onMove: onMove, onRelease: onRelease, enabled: enabled, vertical: vertical, inverted: inverted, ...others },
        react_1.default.createElement(Track_1.default, { color: outboundColor, style: minStyle, length: minTrackPct * 100, vertical: vertical, thickness: trackHeight }),
        react_1.default.createElement(Thumb_1.default, { size: thumbSize, color: thumbTintColor, trackHeight: thumbRadius, style: thumbStyle, thumbImage: thumbImage }),
        react_1.default.createElement(Track_1.default, { color: inboundColor, style: midStyle, length: (maxTrackPct - minTrackPct) * 100, vertical: vertical, thickness: trackHeight }),
        react_1.default.createElement(Thumb_1.default, { size: thumbSize, color: thumbTintColor, trackHeight: thumbRadius, style: thumbStyle, thumbImage: thumbImage }),
        react_1.default.createElement(Track_1.default, { color: outboundColor, style: maxStyle, length: (1 - maxTrackPct) * 100, vertical: vertical, thickness: trackHeight })));
});
Slider.displayName = 'Slider';
exports.default = Slider;
